{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Your Title\"\n",
        "format: \n",
        "  pdf:\n",
        "    keep-tex: true\n",
        "    include-in-header: \n",
        "       text: |\n",
        "         \\usepackage{fvextra}\n",
        "         \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n",
        "include-before-body:\n",
        "  text: |\n",
        "    \\RecustomVerbatimEnvironment{verbatim}{Verbatim}{\n",
        "      showspaces = false,\n",
        "      showtabs = false,\n",
        "      breaksymbolleft={},\n",
        "      breaklines\n",
        "    }\n",
        "---\n",
        "\n",
        "\n",
        "**PS4:** Due Sat Nov 2 at 5:00PM Central. Worth 100 points. \n",
        "We use (`*`) to indicate a problem that we think might be time consuming. \n",
        "    \n",
        "## Style Points (10 pts) \n",
        "Please refer to the minilesson on code style\n",
        "**[here](https://uchicago.zoom.us/rec/share/pG_wQ-pHTQrJTmqNn4rcrw5V194M2H2s-2jdy8oVhWHkd_yZt9o162IWurpA-fxU.BIQlSgZLRYctvzp-)**.\n",
        "\n",
        "## Submission Steps (10 pts)\n",
        "1. This problem set is a paired problem set.\n",
        "2. Play paper, scissors, rock to determine who goes first. Call that person *Partner 1*.\n",
        "    - Partner 1 (name and cnet ID):\n",
        "    - Partner 2 (name and cnet ID):\n",
        "3. Partner 1 will accept the `ps4` and then share the link it creates with their partner. You can only share it with one partner so you will not be able to change it after your partner has accepted. \n",
        "4. \"This submission is our work alone and complies with the 30538 integrity policy.\" Add your initials to indicate your agreement: \\*\\*\\_\\_\\*\\* \\*\\*\\_\\_\\*\\*\n",
        "5. \"I have uploaded the names of anyone else other than my partner and I worked with on the problem set **[here](https://docs.google.com/forms/d/185usrCREQaUbvAXpWhChkjghdGgmAZXA3lPWpXLLsts/edit)**\"  (1 point)\n",
        "6. Late coins used this pset: \\*\\*\\_\\_\\*\\* Late coins left after submission: \\*\\*\\_\\_\\*\\*\n",
        "7. Knit your `ps4.qmd` to an PDF file to make `ps4.pdf`, \n",
        "    * The PDF should not be more than 25 pages. Use `head()` and re-size figures when appropriate. \n",
        "8. (Partner 1): push  `ps4.qmd` and `ps4.pdf` to your github repo.\n",
        "9. (Partner 1): submit `ps4.pdf` via Gradescope. Add your partner on Gradescope.\n",
        "10. (Partner 1): tag your submission in Gradescope\n",
        "\n",
        "**Important:** Repositories are for tracking code. **Do not commit the data or shapefiles to your repo.** The best way to do this is with `.gitignore`, which we have covered in class. If you do accidentally commit the data, Github has a [guide](https://docs.github.com/en/repositories/working-with-files/managing-large-files/about-large-files-on-github#removing-files-from-a-repositorys-history). The best course of action depends on whether you have pushed yet. This also means that both partners will have to download the initial raw data and any data cleaning code will need to be re-run on both partners' computers. \n",
        "\n",
        "## Download and explore the Provider of Services (POS) file (10 pts)\n",
        "\n",
        "1. \n",
        "2. \n",
        "4. \n",
        "    a.\n",
        "    b.\n",
        "## Identify hospital closures in POS file (15 pts) (*)\n",
        "## Download and explore the Provider of Services (POS) file (10 pts)\n",
        "1. Use this definition to create a list of all hospitals that were active in 2016 that were suspected to have closed by 2019. Record the facility name and zip of each hospital as well as the year of suspected closure (when they become terminated or disappear from the data). How many hospitals are there that fit this definition?\n",
        "2. \n",
        "3. \n",
        "    a.\n",
        "    b.\n",
        "    c.\n"
      ],
      "id": "95e6bd10"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import sys\n",
        "!{sys.executable} -m pip install pandas\n",
        "!{sys.executable} -m pip install altair\n",
        "import pandas as pd\n",
        "import time\n",
        "import altair as alt\n",
        "import pandas as pd\n",
        "#1\n",
        "# Function to load and filter hospital data for short-term hospitals\n",
        "def hospital_data(file_path):\n",
        "    df = pd.read_csv(file_path, encoding='ISO-8859-1')\n",
        "    df_filtered = df[(df['PRVDR_CTGRY_CD'] == 1) & (df['PRVDR_CTGRY_SBTYP_CD'] == 1)].copy()\n",
        "    year = file_path[-8:-4]  \n",
        "    df_filtered['Year'] = year  \n",
        "    print(f'Number of hospitals that were active in 2016 and closed by 2019 {year}: {df_filtered.shape[0]}')\n",
        "    return df_filtered\n",
        "\n",
        "# Load data for each year\n",
        "pos2016 = hospital_data('/Users/jxn/Documents/GitHub/Alex-Nelly/pos2016.csv')\n",
        "pos2017 = hospital_data('/Users/jxn/Documents/GitHub/Alex-Nelly/pos2017.csv')\n",
        "pos2018 = hospital_data('/Users/jxn/Documents/GitHub/Alex-Nelly/pos2018.csv')\n",
        "pos2019 = hospital_data('/Users/jxn/Documents/GitHub/Alex-Nelly/pos2019.csv')\n",
        "\n",
        "# Combine data for all years\n",
        "data_sum = pd.concat([pos2016, pos2017, pos2018, pos2019])\n",
        "\n",
        "# Filter active hospitals in 2016\n",
        "hospital_2016 = pos2016[pos2016['PGM_TRMNTN_CD'] == 'Active Provider']\n",
        "\n",
        "# Dictionary to hold data for each year for checking closures\n",
        "closure_yrs = {\n",
        "    2017: pos2017,\n",
        "    2018: pos2018,\n",
        "    2019: pos2019\n",
        "}\n",
        "# Identify hospitals that were active in 2016 but closed in subsequent years\n",
        "hospital_closures = []\n",
        "for _, row in active_2016.iterrows():\n",
        "    prvid = row['PRVDR_NUM']\n",
        "    facility_name = row['FAC_NAME']\n",
        "    zip_code = row['ZIP_CD']\n",
        "    closed = False\n",
        "    for year, data in data_years.items():\n",
        "        if prvid in data['PRVDR_NUM'].values:\n",
        "            status = data[data['PRVDR_NUM'] == prvid]['PGM_TRMNTN_CD'].values[0]\n",
        "            if status != 'Active Provider':\n",
        "                hospital_closures.append((facility_name, zip_code, year))\n",
        "                closed = True\n",
        "                break\n",
        "        else:\n",
        "            hospital_closures.append((facility_name, zip_code, year))\n",
        "            closed = True\n",
        "            break\n",
        "\n",
        "closures_df = pd.DataFrame(hospital_closures, columns=['Facility Name', 'Zip Code', 'Year of Closure'])\n",
        "print(f\"Number of suspected closures: {closures_df.shape[0]}\")"
      ],
      "id": "2b3a5a10",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Download Census zip code shapefile (10 pt) \n",
        "\n",
        "1. \n",
        "    a.\n",
        "    b. \n",
        "2. \n",
        "\n",
        "## Calculate zip codeâ€™s distance to the nearest hospital (20 pts) (*)\n",
        "\n",
        "1. \n",
        "2. \n",
        "3. \n",
        "4. \n",
        "    a.\n",
        "    b.\n",
        "5. \n",
        "    a.\n",
        "    b.\n",
        "    c.\n",
        "    \n",
        "## Effects of closures on access in Texas (15 pts)\n",
        "\n",
        "1. \n",
        "2. \n",
        "3. \n",
        "4. \n",
        "\n",
        "## Reflecting on the exercise (10 pts) "
      ],
      "id": "61004aad"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "/Users/jxn/Library/Python/3.9/share/jupyter/kernels/python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}